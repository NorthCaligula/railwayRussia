from flask import Flask, jsonify, request
from flask_cors import CORS
from pymongo import MongoClient
import logging
import time
import jwt
from datetime import datetime

JWT_SECRET = 'your-very-secret-key'
JWT_ALGORITHM = 'HS256'

app = Flask(__name__)
CORS(app)  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É CORS

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient('mongodb://localhost:27017/')
db = client['RussiaRailway']
collectionsComment = db['textOffer']


@app.route("/offer/text", methods=['POST'])
def get_offer_text():
    logger.info("‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –∫ API /offer/text")

    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith("Bearer "):
        logger.warning("‚õî –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization")
        return jsonify({'error': 'Missing or invalid Authorization header'}), 401

    token = auth_header.split(" ")[1]
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        username = payload.get('username')
        if not username:
            logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            raise jwt.InvalidTokenError("No username in token")
    except jwt.ExpiredSignatureError:
        logger.warning("‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫")
        return jsonify({'error': 'Token expired'}), 401
    except jwt.InvalidTokenError as e:
        logger.warning(f"üîê –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}")
        return jsonify({'error': f'Invalid token: {str(e)}'}), 401

    data = request.get_json()
    comment = data.get("comment", "").strip()

    if not comment:
        logger.warning(f"üìù –ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        return jsonify({'error': '–ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}), 400

    doc = {
        'username': username,
        'comment': comment,
        'timestamp': datetime.utcnow()
    }

    try:
        collectionsComment.insert_one(doc)
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {username}: '{comment}'")
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ MongoDB: {e}")
        return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'}), 500

@app.route("/offer/data", methods=['POST'])
def get_offer_data():
    logger.info("‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –∫ API /offer/data")

    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith("Bearer "):
        logger.warning("‚õî –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization")
        return jsonify({'error': 'Missing or invalid Authorization header'}), 401

    token = auth_header.split(" ")[1]
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        username = payload.get('username')
        if not username:
            logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            raise jwt.InvalidTokenError("No username in token")
    except jwt.ExpiredSignatureError:
        logger.warning("‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫")
        return jsonify({'error': 'Token expired'}), 401
    except jwt.InvalidTokenError as e:
        logger.warning(f"üîê –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}")
        return jsonify({'error': f'Invalid token: {str(e)}'}), 401

    try:
        data = request.get_json()

        geojson_data = data.get("geojson")
        year_id = data.get("year_id")

        if not geojson_data or not year_id:
            logger.warning(f"üì≠ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç geojson –∏–ª–∏ year_id –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            return jsonify({'error': 'geojson –∏ year_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

        doc = {
            'username': username,
            'geojson': geojson_data,
            'year_id': year_id,
            'timestamp': datetime.utcnow()
        }

        collectionsComment.insert_one(doc)
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–µ–æ-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {username} –¥–ª—è –≥–æ–¥–∞ {year_id}")
        return jsonify({'status': 'ok'}), 200

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ geojson –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'}), 500

if __name__ == '__main__':
    app.run(port=5003, debug=True)